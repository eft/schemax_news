<?php

/**
 * @file
 * Code for the schemax_news feature.
 */
include_once 'schemax_news.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * where FORM_ID is schemax_news_node_form
 *
 */
function schemax_news_form_schemax_news_node_form_alter(&$form, &$form_state, $form_id) {

  $node = $form_state['node'];

  // Get team_id passed to the form via the URL
  $team_id = $form_state['entityreference_prepopulate']['node']['schemax_news']['og_group_ref'][0];

  if (!empty($team_id)) {
    // Check if this is a new node
    if (!isset($node->nid) || isset($node->is_new)) {
      // This is a new node.
      // Get a list of all contact information (e.g. email) associated with persons on the team
      $team_persons = _schemax_news_get_team_persons($team_id);

      $header = array(
        'name' => t('Player Name'),
      );

      $form['table_team_persons'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $team_persons,
      );
    }
    else {
      // This is not a new node.
    }

    // Prepend a callback to preview action callbacks.
    array_unshift($form['actions']['submit']['#submit'], 'schemax_news_news_form_submit_handler');
  }
}

/*
 * Retrieves the id and name of each person on a team
 *
 */

function _schemax_news_get_team_persons($team_id = 24) {

  $bundle = 'schemax_person';

  // Construct select statement that retrieves the node id and the name
  // of every person on the team
  $select = 'SELECT DISTINCT ';
  $select .= 'n.nid, ';
  $select .= "CONCAT_WS(' ',last.field_schemax_last_name_value, first.field_schemax_first_name_value) name ";
  $select .= 'FROM {node} n ';
  $select .= 'INNER JOIN {og_membership} ogm ON n.nid = ogm.etid ';
  $select .= 'INNER JOIN {field_data_field_schemax_first_name} first ON n.nid = first.entity_id ';
  $select .= 'INNER JOIN {field_data_field_schemax_last_name} last ON n.nid = last.entity_id ';
  $select .= 'WHERE ';
  $select .= 'ogm.gid = :gid ';
  $select .= 'AND n.type = :bundle';

  // Run query
  $result = db_query($select, array(':gid' => $team_id, ':bundle' => $bundle));

  // Fetch ids and names in an array
  $team_persons = $result->fetchAllAssoc('nid', PDO::FETCH_ASSOC);

  return $team_persons;
}

function schemax_news_news_form_submit_handler($form, $form_state) {

  // Get array of persons checked by user on news form.
  $recipients = array_filter($form_state['values']['table_team_persons']);

  // email the news to recipients
}

/*
 * Implements hook_node_insert().
 */
function schemax_news_node_insert($node) {

  list(,, $bundle) = entity_extract_ids('node', $node);
  if (!og_is_group_content_type('node', $bundle)) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if (!$wrapper->{'og_membership__' . OG_STATE_ACTIVE}->value()) {
    // Node isn't associated, or doesn't have an active association with
    // any group.
    return;
  }

  $nids = array();
  foreach ($wrapper->{'og_membership__' . OG_STATE_ACTIVE}->value() as $og_membership) {
    if ($og_membership->group_type != 'node') {
      // For simplicity we operate only on membership with node groups.
      continue;
    }
    $nids[] = $og_membership->gid;
  }

  if (!$nids) {
    return;
  }

  // Create a "Post in group" message. We don't use a token replacement
  // here as it needs to get the data from multiple values of the field.
  // Furthermore, this replacement probably doesn't make sense outside of
  // this message-type context, so we don't want to add another token,
  // that will not be used.
  $arguments['!groups'] = array(
    'callback' => '_schemax_news_teams_list',
    'pass message' => TRUE,
  );
  $message = message_create('schemax_message', array('arguments' => $arguments, 'uid' => $node->uid));

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_schemax_node_reference->set($node);
  $wrapper->field_schemax_team_reference->set($nids);
  $wrapper->field_schemax_published->set($node->status);
  $wrapper->save();

  //message_notify_send_message($message);
}


/**
 * Message callback; Show a comma separated list of groups.
 *
 * see the message_og_example module
 *
 * @param $message
 *   The message entity.
 */
function _schemax_news_teams_list(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $items = array();
  foreach ($wrapper->field_schemax_team_reference->value() as $node) {
    if (!node_access('view', $node)) {
      // User doesn't have access to view the group.
      continue;
    }
    $url = entity_uri('node', $node);
    $label = entity_label('node', $node);
    $items[] = l($label, $url['path'], $url['options']);
  }
  return implode(', ', $items);
}

